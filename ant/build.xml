<!-- The -profile option, along with other javac command options, can be specified using the nested compilerarg element: -->

<project name="SWDefinedGateway" default="main" basedir="."
	xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- -->
	<property name="common.src" location="../../SoftwareDefinedGateways/src/common/src" />
	<property name="common.test.src" location="../../SoftwareDefinedGateways/src/common/test" />
	<!-- -->
	<property name="interface.src"
		location="../../SoftwareDefinedGateways/src/interface/src" />
	<property name="interface.test.src"
		location="../../SoftwareDefinedGateways/src/interface/test" />
	<!-- -->
	<property name="daemon.src" location="../../SoftwareDefinedGateways/src/daemon/src" />
	<property name="daemon.test.src" location="../../SoftwareDefinedGateways/src/daemon/test" />
	<!-- -->
	<property name="samples.src" location="../../SoftwareDefinedGateways/src/samples/src" />


	<path id="src.path">
		<pathelement location="${common.src}" />
		<pathelement location="${interface.src}" />
		<pathelement location="${daemon.src}" />
		<pathelement location="${samples.src}" />
	</path>

	<path id="test.path">
		<pathelement location="${common.test.src}" />
		<pathelement location="${interface.test.src}" />
		<pathelement location="${daemon.test.src}" />
	</path>

	<!-- Variables used for JUnit testing -->
	<property name="test.report.dir" location="testreport" />


	<!-- Define the classpath which includes the junit.jar and the classes after 
		compiling -->
	<path id="junit.class.path">
		<pathelement location="lib/junit-4.11.jar" />
		<pathelement location="lib/hamcrest-core-1.3.jar" />
		<pathelement location="${build.dir}" />
	</path>

	<!-- Output Folder -->
	<property name="build" location="build" />
	<property name="build.test" location="build/test" />

	<!-- Jacoco Coverage for Java 1.8 -->
	<property name="jacoco.dir" value="lib/jacoco-0.7.3" />
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${jacoco.dir}/lib/jacocoant.jar" />
	</taskdef>

	<!-- Target Definitions -->
	<target name="init">
		<tstamp />
		<mkdir dir="${build}" />
		<mkdir dir="${build.test}" />
		<mkdir dir="${test.report.dir}" />
	</target>

	<target name="compile" depends="init" description="compile all the source">
		<javac destdir="${build}">
			<src refid="src.path" />
		</javac>

		<javac destdir="${build.test}">
			<src refid="src.path" />
			<src refid="test.path" />
			<classpath refid="junit.class.path" />
		</javac>

		<copy todir="${build}" overwrite="true" verbose="true">
			<fileset dir="${common.src}" includes="**/*.xsd" />
		</copy>
	</target>

	<target name="clean" description="clean up">
		<delete dir="${build}" />
		<delete dir="${test.report.dir}" />
		<delete file="cobertura.ser" />
		<delete file="jacoco.exec" />
	</target>


	<!-- Run the JUnit Tests -->
	<target name="test" depends="init,compile">
		<junit printsummary="on" fork="false" haltonfailure="yes">
			<classpath refid="junit.class.path" />
			<classpath>
				<pathelement location="${build.test}" />
				<pathelement location="${build}" />
			</classpath>
			<formatter type="plain" usefile="false" />

			<batchtest todir="${test.report.dir}">
				<fileset dir="${common.test.src}" includes="**/*Test.java" />
			</batchtest>
		</junit>
	</target>

	<target name="code-coverage" depends="init,compile">

		<delete file="jacoco.exec" />
		<delete dir="${test.report.dir}/**" />

		<jacoco:coverage excludes="${build.test}/**.java">
			<junit fork="true" forkmode="once" dir="${basedir}"
				failureProperty="test.failed">
				<classpath refid="junit.class.path" />
				<classpath>
					<pathelement location="${build.test}" />
					<pathelement location="${build}" />
				</classpath>

				<formatter type="xml" />
				<test name="${testcase}" todir="${test.report.dir}" if="testcase" />
				<batchtest todir="${test.report.dir}" unless="testcase">

					<fileset dir="${common.test.src}" includes="**/*Test.java" />
					<fileset dir="${interface.test.src}" includes="**/*Test.java" />
					<fileset dir="${daemon.test.src}" includes="**/*Test.java" />

				</batchtest>
			</junit>
		</jacoco:coverage>

		<jacoco:report>
			<executiondata>
				<file file="jacoco.exec" />
			</executiondata>

			<structure name="SWDefinedGateway">
				<classfiles>
					<fileset dir="${build}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${common.src}" />
					<fileset dir="${interface.src}" />
					<fileset dir="${daemon.src}" />
					<fileset dir="${samples.src}" />
				</sourcefiles>
			</structure>
			<html destdir="${test.report.dir}" />
		</jacoco:report>

	</target>

<!-- Default Target -->
<target name="main" depends="compile, test">
    <description>Main target</description>
</target>

<!-- Versioning ANT and GIT:
For several of my projects I capture the subversion revision number, time, user who ran the build, and some system information, stuff them into a .properties file that gets included in the application jar, and read that jar at runtime.

The ant code looks like this:

<!-- software revision number -->
<!--<property name="version" value="1.23"/>

<target name="buildinfo">
    <tstamp>
        <format property="builtat" pattern="MM/dd/yyyy hh:mm aa" timezone="America/New_York"/>
    </tstamp>        
    <exec executable="svnversion" outputproperty="svnversion"/>
    <exec executable="whoami" outputproperty="whoami"/>
    <exec executable="uname" outputproperty="buildsystem"><arg value="-a"/></exec>

    <propertyfile file="path/to/project.properties"
        comment="This file is automatically generated - DO NOT EDIT">        
        <entry key="buildtime" value="${builtat}"/>
        <entry key="build" value="${svnversion}"/>
        <entry key="builder" value="${user.name}"/>
        <entry key="version" value="${version}"/>
        <entry key="system" value="${buildsystem}"/>
    </propertyfile>
    
    <property name="antprops.file" location="${build.temp.project.dir}/used_ant.properties" /> <echoproperties destfile="${antprops.file}"/> sort the file, ONLY for ant 1.7.0 and newer!!!
     <concat> <union> <sort> <tokens> <file file="${antprops.file}" /> <linetokenizer includedelims="true" /> </tokens> </sort> </union> </concat>
</target>
<exec executable="git" outputproperty="build.commit">
    <arg value="describe"/>
    <arg value="--tags"/>
    <arg value="--abbrev=20"/>
    <arg value="--match=[^(hudson)]*">
</exec>
-->

<!-- TODO : -->
<target name="compile-compact" depends="init" description="Compile the code using the compact JDK"> 
<javac destdir="${@{module}.classes.dir}"
           encoding="UTF-8"
           debug="${javac.debug}"
           debuglevel="${javac.debuglevel}"
           optimize="${javac.optimize}"
           deprecation="${javac.deprecation}"
           verbose="${javac.verbose}"
           target="${javac.target}"
           source="${javac.source}"
           listfiles="${javac.listfiles}"
           includeAntRuntime="no"
           includeJavaRuntime="no"
           excludes="${ade.files}, **/package-info.java"
           classpathref="@{module}.classpath.refid">
        <compilerarg line="${javac.warnlevel}" />
        <compilerarg line="-profile compact2" />
        <src refid="@{module}.sourcepath.refid" />
</java>

<!-- TODO : -->
    <target name="dist" depends="compile-compact" description="Generate the distribution using the compact JDK"> 
		<mkdir dir="${dist}/lib" /> 
        <jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}" />
        
    </target>
</project>